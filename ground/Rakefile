# -*- coding: utf-8 -*-
task :env do
  $: << '.' unless $:.include? '.'
  require 'gstar'
  require 'pp'
  require 'base64'
end

desc 'Run Console'
task :console => :env do |t, args|
  puts "Loading #{Ground.env} environment"
  require "irb"
  require 'irb/completion'
  ARGV.clear
  IRB.start
end

namespace :maintain do
  desc 'pull stars from github'
  task :pull_stars_from_github => :env do
    page = 0
    loop do
      page += 1
      res = GithubAPI::ListStarredRepos(page: page)
      stars = JSON.parse res
      stars.each {|star|
        pulled_star = Gstar::DB[:stars].where(source_id: "github_#{star['id']}").first
        if pulled_star.nil?
          InsertStarFromGithub star
        end
      }
      puts page
      break if stars.size == 0
    end
   end

  desc 'sync stars from github, just recently starred projects'
  task :sync_stars_from_github => :env do
    Ground.logger.info "--Start sync stars from github--#{Time.now}---"
    res = GithubAPI::ListStarredRepos()
    stars = JSON.parse res
    stars.each {|star|
      pulled_star = Gstar::DB[:stars].where(source_id: "github_#{star['id']}").first
      if pulled_star.nil?
        Ground.logger.info "sync the star #{star['full_name']}..."
        InsertStarFromGithub star
      end
    }
    Ground.logger.info "--End sync stars from github--#{Time.now}---"
  end

  desc 'build full text serach index'
  task :build_full_text_index => :env do
    db = Gstar::DB
    db[:stars].each {|star|
      db[:reindex_stars].insert(star_id: star[:id], status: 0)
    }
  end

end

namespace :debug do
  task :list_starred_repos => :env do
    res = GithubAPI::ListStarredRepos()
    res = JSON.parse res
    pp res
    pp res.size
  end
end

namespace :db do
  task :migrate => :env do
    Sequel.extension :migration, :core_extensions
    Sequel::Migrator.run Gstar::DB, 'db/migrations', use_transactions: true
  end
end

namespace :cron do
  task :check_latest_stars => :env do
    db = Gstar::DB
    Ground.logger.info "--Start check latest stars from github--#{Time.now}---"
    if need_sync_stars?
      res = GithubAPI::ListStarredRepos(per_page: 50)
      stars = JSON.parse res
      stars.each {|star|
        pulled_star = db[:stars].where(source_id: "github_#{star['id']}").first
        if pulled_star.nil?
          Ground.logger.info "sync the star #{star['full_name']}..."
          star = InsertStarFromGithub star
          db[:reindex_stars].insert(star_id: star[:id], status: 0)
        end
      }
    end
    Ground.logger.info "--End check latest stars from github--#{Time.now}---"
  end

  def need_sync_stars?
    res = GithubAPI::ListStarredRepos(per_page: 1)
    stars = JSON.parse res
    latest_star = stars.first
    star = Gstar::DB[:stars].where(source_id: "github_#{latest_star['id']}").first
    star.nil?
  end

  task :index_stars => :env do
    Ground.logger.info "--Start index stars from github--#{Time.now}---"
    db = Gstar::DB
    db[:reindex_stars].where(status: 0).each {|reindex_star|
      star = db[:stars].where(id: reindex_star[:star_id]).first
      BuildInvertedStarIndex star: star
      db[:reindex_stars].where(id: reindex_star[:id]).update(status: 1)
    }
    Ground.logger.info "--End index stars from github--#{Time.now}---"
  end

  task :clear_reindex_records => :env do
    Ground.logger.info "--Start clear reindex records from github--#{Time.now}---"
    Gstar::DB[:reindex_stars].where(status: 1).delete
    Ground.logger.info "--End clear reindex records from github--#{Time.now}---"
  end

end

